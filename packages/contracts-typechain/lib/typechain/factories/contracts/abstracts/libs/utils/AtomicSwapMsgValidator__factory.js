"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtomicSwapMsgValidator__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "contractAddress",
                type: "address",
            },
        ],
        name: "InvalidContractAddress",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "provided",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maximum",
                type: "uint256",
            },
        ],
        name: "InvalidExpirationTime",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidMinimumBidLimit",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidTotalPercentage",
        type: "error",
    },
    {
        inputs: [],
        name: "OrderAlreadyCompleted",
        type: "error",
    },
    {
        inputs: [],
        name: "OrderNotAllowTake",
        type: "error",
    },
    {
        inputs: [],
        name: "OverMaximumReleaseStep",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedCancelAction",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedSender",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedTakeAction",
        type: "error",
    },
    {
        inputs: [],
        name: "ZeroReleaseSchedule",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "addr",
                type: "address",
            },
        ],
        name: "isContract",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uuid",
                        type: "bytes32",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.Coin",
                        name: "sellToken",
                        type: "tuple",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.Coin",
                        name: "buyToken",
                        type: "tuple",
                    },
                    {
                        internalType: "address",
                        name: "maker",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "desiredTaker",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "minBidAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "expireAt",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "acceptBid",
                        type: "bool",
                    },
                ],
                internalType: "struct IAtomicSwapBase.MakeSwapMsg",
                name: "makeswap",
                type: "tuple",
            },
        ],
        name: "validateMakeSwapParams",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "durationInHours",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "percentage",
                        type: "uint256",
                    },
                ],
                internalType: "struct IAtomicSwapBase.Release[]",
                name: "releases",
                type: "tuple[]",
            },
        ],
        name: "validateVestingParams",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x610e1d610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c8063162790551461006657806333b988f5146100965780639a0ebe00146100b2578063c3aee15d146100ce578063fe963084146100ea575b600080fd5b610080600480360381019061007b9190610717565b610106565b60405161008d919061075f565b60405180910390f35b6100b060048036038101906100ab919061095e565b610119565b005b6100cc60048036038101906100c79190610b25565b61021c565b005b6100e860048036038101906100e39190610b89565b6103eb565b005b61010460048036038101906100ff9190610c3c565b6104e6565b005b600080823b905060008111915050919050565b6000815103610154576040517ffd68e07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b82518110156101a05782818151811061017457610173610c7c565b5b6020026020010151602001518261018b9190610cda565b9150808061019890610d0e565b915050610158565b5061271081146101dc576040517f0b8ad7f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609682511115610218576040517f1531e37f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff1681602001516000015173ffffffffffffffffffffffffffffffffffffffff161415801561026f575061026d816020015160000151610106565b155b156102b9578060200151600001516040517f19bb40290000000000000000000000000000000000000000000000000000000081526004016102b09190610d65565b60405180910390fd5b60008160a00151116102f7576040517f5fe07c7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103625750806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610399576040517f0809490800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428160c0015110156103e8578060c00151426040517ff00605cf0000000000000000000000000000000000000000000000000000000081526004016103df929190610d8f565b60405180910390fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610474576040517f978f045600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600381111561048857610487610db8565b5b8160010160009054906101000a900460ff1660038111156104ac576104ab610db8565b5b146104e3576040517f0368368700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600081600084600001518152602001908152602001600020905080600c0160009054906101000a900460ff1615610549576040517f531749dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156105fa57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610631576040517fbe544a2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600381111561064557610644610db8565b5b8160010160009054906101000a900460ff16600381111561066957610668610db8565b5b036106a0576040517f0368368700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106e4826106b9565b9050919050565b6106f4816106d9565b81146106ff57600080fd5b50565b600081359050610711816106eb565b92915050565b60006020828403121561072d5761072c6106af565b5b600061073b84828501610702565b91505092915050565b60008115159050919050565b61075981610744565b82525050565b60006020820190506107746000830184610750565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107c88261077f565b810181811067ffffffffffffffff821117156107e7576107e6610790565b5b80604052505050565b60006107fa6106a5565b905061080682826107bf565b919050565b600067ffffffffffffffff82111561082657610825610790565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b61085481610841565b811461085f57600080fd5b50565b6000813590506108718161084b565b92915050565b60006040828403121561088d5761088c61083c565b5b61089760406107f0565b905060006108a784828501610862565b60008301525060206108bb84828501610862565b60208301525092915050565b60006108da6108d58461080b565b6107f0565b905080838252602082019050604084028301858111156108fd576108fc610837565b5b835b8181101561092657806109128882610877565b8452602084019350506040810190506108ff565b5050509392505050565b600082601f8301126109455761094461077a565b5b81356109558482602086016108c7565b91505092915050565b600060208284031215610974576109736106af565b5b600082013567ffffffffffffffff811115610992576109916106b4565b5b61099e84828501610930565b91505092915050565b6000819050919050565b6109ba816109a7565b81146109c557600080fd5b50565b6000813590506109d7816109b1565b92915050565b6000604082840312156109f3576109f261083c565b5b6109fd60406107f0565b90506000610a0d84828501610702565b6000830152506020610a2184828501610862565b60208301525092915050565b610a3681610744565b8114610a4157600080fd5b50565b600081359050610a5381610a2d565b92915050565b60006101408284031215610a7057610a6f61083c565b5b610a7b6101006107f0565b90506000610a8b848285016109c8565b6000830152506020610a9f848285016109dd565b6020830152506060610ab3848285016109dd565b60408301525060a0610ac784828501610702565b60608301525060c0610adb84828501610702565b60808301525060e0610aef84828501610862565b60a083015250610100610b0484828501610862565b60c083015250610120610b1984828501610a44565b60e08301525092915050565b60006101408284031215610b3c57610b3b6106af565b5b6000610b4a84828501610a59565b91505092915050565b6000819050919050565b610b6681610b53565b8114610b7157600080fd5b50565b600081359050610b8381610b5d565b92915050565b600060208284031215610b9f57610b9e6106af565b5b6000610bad84828501610b74565b91505092915050565b600060408284031215610bcc57610bcb61083c565b5b610bd660406107f0565b90506000610be6848285016109c8565b6000830152506020610bfa84828501610702565b60208301525092915050565b6000819050919050565b610c1981610c06565b8114610c2457600080fd5b50565b600081359050610c3681610c10565b92915050565b60008060608385031215610c5357610c526106af565b5b6000610c6185828601610bb6565b9250506040610c7285828601610c27565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce582610841565b9150610cf083610841565b9250828201905080821115610d0857610d07610cab565b5b92915050565b6000610d1982610841565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4b57610d4a610cab565b5b600182019050919050565b610d5f816106d9565b82525050565b6000602082019050610d7a6000830184610d56565b92915050565b610d8981610841565b82525050565b6000604082019050610da46000830185610d80565b610db16020830184610d80565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220ddf3ca6217180f52b7a709ea0c315ec0fa2e8ecfe46a003c2204d9d5caa6688164736f6c63430008140033";
const isSuperArgs = (xs) => xs.length > 1;
class AtomicSwapMsgValidator__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.AtomicSwapMsgValidator__factory = AtomicSwapMsgValidator__factory;
AtomicSwapMsgValidator__factory.bytecode = _bytecode;
AtomicSwapMsgValidator__factory.abi = _abi;
//# sourceMappingURL=AtomicSwapMsgValidator__factory.js.map