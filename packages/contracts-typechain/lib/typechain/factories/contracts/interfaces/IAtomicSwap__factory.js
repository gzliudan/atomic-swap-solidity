"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IAtomicSwap__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "AlreadyCompleted",
        type: "error",
    },
    {
        inputs: [],
        name: "AlreadyExistPool",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "real",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expected",
                type: "uint256",
            },
        ],
        name: "AlreadyExpired",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "InvalidBidAmount",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "real",
                type: "address",
            },
            {
                internalType: "address",
                name: "expected",
                type: "address",
            },
        ],
        name: "InvalidBidder",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "max",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "InvalidExpireTime",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidMinBidCap",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidSender",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidTokenPair",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "real",
                type: "address",
            },
            {
                internalType: "address",
                name: "expected",
                type: "address",
            },
        ],
        name: "NoPermissionToAccept",
        type: "error",
    },
    {
        inputs: [],
        name: "NoPermissionToCancel",
        type: "error",
    },
    {
        inputs: [],
        name: "NoPermissionToTake",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "enum IAtomicSwap.BidStatus",
                name: "status",
                type: "uint8",
            },
        ],
        name: "NoPlaceStatusOfBid",
        type: "error",
    },
    {
        inputs: [],
        name: "NonExistPool",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "real",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expected",
                type: "uint256",
            },
        ],
        name: "NotAllowedAmount",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "real",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expected",
                type: "uint256",
            },
        ],
        name: "NotExpired",
        type: "error",
    },
    {
        inputs: [],
        name: "TokenTransferFailed",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "real",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "current",
                type: "uint256",
            },
        ],
        name: "WrongExpireTime",
        type: "error",
    },
    {
        inputs: [],
        name: "ZeroTokenAddress",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "id",
                type: "bytes32",
            },
        ],
        name: "AtomicSwapOrderCanceled",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "id",
                type: "bytes32",
            },
        ],
        name: "AtomicSwapOrderCreated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "maker",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "taker",
                type: "address",
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "id",
                type: "bytes32",
            },
        ],
        name: "AtomicSwapOrderTook",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "payer",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "daoShare",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "burned",
                type: "uint256",
            },
        ],
        name: "PaymentReceived",
        type: "event",
    },
];
class IAtomicSwap__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IAtomicSwap__factory = IAtomicSwap__factory;
IAtomicSwap__factory.abi = _abi;
//# sourceMappingURL=IAtomicSwap__factory.js.map