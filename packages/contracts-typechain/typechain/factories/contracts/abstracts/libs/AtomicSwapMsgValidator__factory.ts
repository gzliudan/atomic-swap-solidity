/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  AtomicSwapMsgValidator,
  AtomicSwapMsgValidatorInterface,
} from "../../../../contracts/abstracts/libs/AtomicSwapMsgValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "InvalidContractAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "provided",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maximum",
        type: "uint256",
      },
    ],
    name: "InvalidExpirationTime",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMinimumBidLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderAlreadyCompleted",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderNotAllowTake",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedCancelAction",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedSender",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedTakeAction",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct IAtomicSwapBase.Coin",
            name: "sellToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct IAtomicSwapBase.Coin",
            name: "buyToken",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "desiredTaker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minBidAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expireAt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "acceptBid",
            type: "bool",
          },
        ],
        internalType: "struct IAtomicSwapBase.MakeSwapMsg",
        name: "makeswap",
        type: "tuple",
      },
    ],
    name: "_validateMakeSwapParams",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610a06610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80632dbbbec01461005057806357fc12b01461006c5780639efdfeb114610088575b600080fd5b61006a600480360381019061006591906106fa565b6100a4565b005b610086600480360381019061008191906108ae565b610263565b005b6100a2600480360381019061009d9190610912565b610432565b005b600081600084600001518152602001908152602001600020905080600c0160009054906101000a900460ff1615610107576040517f531749dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156101b857503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156101ef576040517fbe544a2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156102035761020261093f565b5b8160010160009054906101000a900460ff1660038111156102275761022661093f565b5b0361025e576040517f0368368700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff1681600001516000015173ffffffffffffffffffffffffffffffffffffffff16141580156102b657506102b481600001516000015161052d565b155b15610300578060000151600001516040517f19bb40290000000000000000000000000000000000000000000000000000000081526004016102f7919061097d565b60405180910390fd5b600081608001511161033e576040517f5fe07c7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103a95750806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156103e0576040517f0809490800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428160a00151101561042f578060a00151426040517ff00605cf0000000000000000000000000000000000000000000000000000000081526004016104269291906109a7565b60405180910390fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104bb576040517f978f045600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060038111156104cf576104ce61093f565b5b8160010160009054906101000a900460ff1660038111156104f3576104f261093f565b5b1461052a576040517f0368368700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080823b905060008111915050919050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61059d82610554565b810181811067ffffffffffffffff821117156105bc576105bb610565565b5b80604052505050565b60006105cf610540565b90506105db8282610594565b919050565b6000819050919050565b6105f3816105e0565b81146105fe57600080fd5b50565b600081359050610610816105ea565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061064182610616565b9050919050565b61065181610636565b811461065c57600080fd5b50565b60008135905061066e81610648565b92915050565b60006040828403121561068a5761068961054f565b5b61069460406105c5565b905060006106a484828501610601565b60008301525060206106b88482850161065f565b60208301525092915050565b6000819050919050565b6106d7816106c4565b81146106e257600080fd5b50565b6000813590506106f4816106ce565b92915050565b600080606083850312156107115761071061054a565b5b600061071f85828601610674565b9250506040610730858286016106e5565b9150509250929050565b6000819050919050565b61074d8161073a565b811461075857600080fd5b50565b60008135905061076a81610744565b92915050565b6000604082840312156107865761078561054f565b5b61079060406105c5565b905060006107a08482850161065f565b60008301525060206107b48482850161075b565b60208301525092915050565b60008115159050919050565b6107d5816107c0565b81146107e057600080fd5b50565b6000813590506107f2816107cc565b92915050565b6000610120828403121561080f5761080e61054f565b5b61081960e06105c5565b9050600061082984828501610770565b600083015250604061083d84828501610770565b60208301525060806108518482850161065f565b60408301525060a06108658482850161065f565b60608301525060c06108798482850161075b565b60808301525060e061088d8482850161075b565b60a0830152506101006108a2848285016107e3565b60c08301525092915050565b600061012082840312156108c5576108c461054a565b5b60006108d3848285016107f8565b91505092915050565b6000819050919050565b6108ef816108dc565b81146108fa57600080fd5b50565b60008135905061090c816108e6565b92915050565b6000602082840312156109285761092761054a565b5b6000610936848285016108fd565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61097781610636565b82525050565b6000602082019050610992600083018461096e565b92915050565b6109a18161073a565b82525050565b60006040820190506109bc6000830185610998565b6109c96020830184610998565b939250505056fea26469706673582212202fee829c1b43b5f4f0c683f9d758921aa73ee21aaa5126ed5ea33f6db3c6d73864736f6c63430008140033";

type AtomicSwapMsgValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AtomicSwapMsgValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AtomicSwapMsgValidator__factory extends ContractFactory {
  constructor(...args: AtomicSwapMsgValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AtomicSwapMsgValidator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): AtomicSwapMsgValidator__factory {
    return super.connect(runner) as AtomicSwapMsgValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AtomicSwapMsgValidatorInterface {
    return new Interface(_abi) as AtomicSwapMsgValidatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AtomicSwapMsgValidator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as AtomicSwapMsgValidator;
  }
}
