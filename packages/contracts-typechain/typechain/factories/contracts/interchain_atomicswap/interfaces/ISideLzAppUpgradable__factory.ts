/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISideLzAppUpgradable,
  ISideLzAppUpgradableInterface,
} from "../../../../contracts/interchain_atomicswap/interfaces/ISideLzAppUpgradable";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_srcChainId",
        type: "uint16",
      },
      {
        internalType: "address payable",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_payload",
        type: "bytes",
      },
    ],
    name: "sendLzMsg",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class ISideLzAppUpgradable__factory {
  static readonly abi = _abi;
  static createInterface(): ISideLzAppUpgradableInterface {
    return new Interface(_abi) as ISideLzAppUpgradableInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ISideLzAppUpgradable {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ISideLzAppUpgradable;
  }
}
