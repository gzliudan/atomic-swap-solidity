/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICliffVesting,
  ICliffVestingInterface,
} from "../../../../contracts/vesting/interfaces/ICliffVesting";

const _abi = [
  {
    inputs: [],
    name: "CliffNotEnded",
    type: "error",
  },
  {
    inputs: [],
    name: "NoVestedTokensAvailable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "VestingAlreadyStarted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "cliffDurationInHours",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "durationInHours",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "releaseIntervalInHours",
        type: "uint256",
      },
    ],
    name: "startVesting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ICliffVesting__factory {
  static readonly abi = _abi;
  static createInterface(): ICliffVestingInterface {
    return new Interface(_abi) as ICliffVestingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICliffVesting {
    return new Contract(address, _abi, runner) as unknown as ICliffVesting;
  }
}
