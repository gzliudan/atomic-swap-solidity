/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IAtomicSwapBase {
  export type AcceptBidMsgStruct = { orderID: BytesLike; bidder: AddressLike };

  export type AcceptBidMsgStructOutput = [orderID: string, bidder: string] & {
    orderID: string;
    bidder: string;
  };

  export type CancelSwapMsgStruct = { orderID: BytesLike };

  export type CancelSwapMsgStructOutput = [orderID: string] & {
    orderID: string;
  };

  export type CoinStruct = { token: AddressLike; amount: BigNumberish };

  export type CoinStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type MakeSwapMsgStruct = {
    uuid: BytesLike;
    sellToken: IAtomicSwapBase.CoinStruct;
    buyToken: IAtomicSwapBase.CoinStruct;
    maker: AddressLike;
    desiredTaker: AddressLike;
    minBidAmount: BigNumberish;
    expireAt: BigNumberish;
    acceptBid: boolean;
  };

  export type MakeSwapMsgStructOutput = [
    uuid: string,
    sellToken: IAtomicSwapBase.CoinStructOutput,
    buyToken: IAtomicSwapBase.CoinStructOutput,
    maker: string,
    desiredTaker: string,
    minBidAmount: bigint,
    expireAt: bigint,
    acceptBid: boolean
  ] & {
    uuid: string;
    sellToken: IAtomicSwapBase.CoinStructOutput;
    buyToken: IAtomicSwapBase.CoinStructOutput;
    maker: string;
    desiredTaker: string;
    minBidAmount: bigint;
    expireAt: bigint;
    acceptBid: boolean;
  };

  export type PlaceBidMsgStruct = {
    bidAmount: BigNumberish;
    bidder: AddressLike;
    bidderReceiver: AddressLike;
    orderID: BytesLike;
    expireTimestamp: BigNumberish;
  };

  export type PlaceBidMsgStructOutput = [
    bidAmount: bigint,
    bidder: string,
    bidderReceiver: string,
    orderID: string,
    expireTimestamp: bigint
  ] & {
    bidAmount: bigint;
    bidder: string;
    bidderReceiver: string;
    orderID: string;
    expireTimestamp: bigint;
  };

  export type TakeSwapMsgStruct = {
    orderID: BytesLike;
    takerReceiver: AddressLike;
  };

  export type TakeSwapMsgStructOutput = [
    orderID: string,
    takerReceiver: string
  ] & { orderID: string; takerReceiver: string };

  export type UpdateBidMsgStruct = {
    orderID: BytesLike;
    bidder: AddressLike;
    addition: BigNumberish;
  };

  export type UpdateBidMsgStructOutput = [
    orderID: string,
    bidder: string,
    addition: bigint
  ] & { orderID: string; bidder: string; addition: bigint };
}

export declare namespace IInterchainAtomicSwap {
  export type InitialParamsStruct = {
    admin: AddressLike;
    chainID: BigNumberish;
    bridge: AddressLike;
    treasury: AddressLike;
    sellerFee: BigNumberish;
    buyerFee: BigNumberish;
  };

  export type InitialParamsStructOutput = [
    admin: string,
    chainID: bigint,
    bridge: string,
    treasury: string,
    sellerFee: bigint,
    buyerFee: bigint
  ] & {
    admin: string;
    chainID: bigint;
    bridge: string;
    treasury: string;
    sellerFee: bigint;
    buyerFee: bigint;
  };

  export type ICMakeSwapMsgStruct = {
    base: IAtomicSwapBase.MakeSwapMsgStruct;
    makerReceiver: AddressLike;
    desiredTaker: AddressLike;
    dstChainID: BigNumberish;
  };

  export type ICMakeSwapMsgStructOutput = [
    base: IAtomicSwapBase.MakeSwapMsgStructOutput,
    makerReceiver: string,
    desiredTaker: string,
    dstChainID: bigint
  ] & {
    base: IAtomicSwapBase.MakeSwapMsgStructOutput;
    makerReceiver: string;
    desiredTaker: string;
    dstChainID: bigint;
  };
}

export interface InterchainAtomicSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptBid"
      | "bids"
      | "bridge"
      | "buyerFeeRate"
      | "bytesToAddress"
      | "cancelBid"
      | "cancelSwap"
      | "counteroffers"
      | "initialize"
      | "makeSwap"
      | "onReceivePacket"
      | "owner"
      | "placeBid"
      | "renounceOwnership"
      | "sellerFeeRate"
      | "swapOrder"
      | "swapOrderITCParams"
      | "takeSwap"
      | "transferOwnership"
      | "updateBid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AcceptedBid"
      | "AtomicSwapOrderCanceled"
      | "AtomicSwapOrderCreated"
      | "AtomicSwapOrderTook"
      | "CanceledBid"
      | "Initialized"
      | "OwnershipTransferred"
      | "ReceivedNewBid"
      | "UpdatedBid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [IAtomicSwapBase.AcceptBidMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyerFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSwap",
    values: [IAtomicSwapBase.CancelSwapMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "counteroffers",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [IInterchainAtomicSwap.InitialParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSwap",
    values: [IInterchainAtomicSwap.ICMakeSwapMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onReceivePacket",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [IAtomicSwapBase.PlaceBidMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrderITCParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takeSwap",
    values: [IAtomicSwapBase.TakeSwapMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBid",
    values: [IAtomicSwapBase.UpdateBidMsgStruct]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytesToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "counteroffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onReceivePacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellerFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapOrderITCParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateBid", data: BytesLike): Result;
}

export namespace AcceptedBidEvent {
  export type InputTuple = [
    orderID: BytesLike,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderID: string, bidder: string, amount: bigint];
  export interface OutputObject {
    orderID: string;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AtomicSwapOrderCanceledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AtomicSwapOrderCreatedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AtomicSwapOrderTookEvent {
  export type InputTuple = [
    maker: AddressLike,
    taker: AddressLike,
    id: BytesLike
  ];
  export type OutputTuple = [maker: string, taker: string, id: string];
  export interface OutputObject {
    maker: string;
    taker: string;
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CanceledBidEvent {
  export type InputTuple = [orderID: BytesLike, bidder: AddressLike];
  export type OutputTuple = [orderID: string, bidder: string];
  export interface OutputObject {
    orderID: string;
    bidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedNewBidEvent {
  export type InputTuple = [
    orderID: BytesLike,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderID: string, bidder: string, amount: bigint];
  export interface OutputObject {
    orderID: string;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedBidEvent {
  export type InputTuple = [
    orderID: BytesLike,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderID: string, bidder: string, amount: bigint];
  export interface OutputObject {
    orderID: string;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InterchainAtomicSwap extends BaseContract {
  connect(runner?: ContractRunner | null): InterchainAtomicSwap;
  waitForDeployment(): Promise<this>;

  interface: InterchainAtomicSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptBid: TypedContractMethod<
    [acceptBidMsg: IAtomicSwapBase.AcceptBidMsgStruct],
    [void],
    "payable"
  >;

  bids: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [bigint, string, bigint, string, string, bigint, bigint] & {
        amount: bigint;
        order: string;
        status: bigint;
        bidder: string;
        bidderReceiver: string;
        receiveTimestamp: bigint;
        expireTimestamp: bigint;
      }
    ],
    "view"
  >;

  bridge: TypedContractMethod<[], [string], "view">;

  buyerFeeRate: TypedContractMethod<[], [bigint], "view">;

  bytesToAddress: TypedContractMethod<[data: BytesLike], [string], "view">;

  cancelBid: TypedContractMethod<[_orderID: BytesLike], [void], "payable">;

  cancelSwap: TypedContractMethod<
    [cancelswap: IAtomicSwapBase.CancelSwapMsgStruct],
    [void],
    "payable"
  >;

  counteroffers: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_params: IInterchainAtomicSwap.InitialParamsStruct],
    [void],
    "nonpayable"
  >;

  makeSwap: TypedContractMethod<
    [icMakeSwap: IInterchainAtomicSwap.ICMakeSwapMsgStruct],
    [void],
    "payable"
  >;

  onReceivePacket: TypedContractMethod<
    [
      _srcChainID: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<
    [placeBidMsg: IAtomicSwapBase.PlaceBidMsgStruct],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellerFeeRate: TypedContractMethod<[], [bigint], "view">;

  swapOrder: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        bigint,
        string,
        IAtomicSwapBase.CoinStructOutput,
        string,
        IAtomicSwapBase.CoinStructOutput,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: string;
        status: bigint;
        maker: string;
        sellToken: IAtomicSwapBase.CoinStructOutput;
        taker: string;
        buyToken: IAtomicSwapBase.CoinStructOutput;
        minBidAmount: bigint;
        createdAt: bigint;
        canceledAt: bigint;
        completedAt: bigint;
        expiredAt: bigint;
        acceptBid: boolean;
      }
    ],
    "view"
  >;

  swapOrderITCParams: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, string, bigint, bigint] & {
        side: bigint;
        makerReceiver: string;
        takerReceiver: string;
        srcChainID: bigint;
        dstChainID: bigint;
      }
    ],
    "view"
  >;

  takeSwap: TypedContractMethod<
    [takeswap: IAtomicSwapBase.TakeSwapMsgStruct],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBid: TypedContractMethod<
    [updateBidMsg: IAtomicSwapBase.UpdateBidMsgStruct],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptBid"
  ): TypedContractMethod<
    [acceptBidMsg: IAtomicSwapBase.AcceptBidMsgStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [bigint, string, bigint, string, string, bigint, bigint] & {
        amount: bigint;
        order: string;
        status: bigint;
        bidder: string;
        bidderReceiver: string;
        receiveTimestamp: bigint;
        expireTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyerFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bytesToAddress"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "cancelBid"
  ): TypedContractMethod<[_orderID: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelSwap"
  ): TypedContractMethod<
    [cancelswap: IAtomicSwapBase.CancelSwapMsgStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "counteroffers"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_params: IInterchainAtomicSwap.InitialParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "makeSwap"
  ): TypedContractMethod<
    [icMakeSwap: IInterchainAtomicSwap.ICMakeSwapMsgStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onReceivePacket"
  ): TypedContractMethod<
    [
      _srcChainID: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [placeBidMsg: IAtomicSwapBase.PlaceBidMsgStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellerFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapOrder"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        bigint,
        string,
        IAtomicSwapBase.CoinStructOutput,
        string,
        IAtomicSwapBase.CoinStructOutput,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        id: string;
        status: bigint;
        maker: string;
        sellToken: IAtomicSwapBase.CoinStructOutput;
        taker: string;
        buyToken: IAtomicSwapBase.CoinStructOutput;
        minBidAmount: bigint;
        createdAt: bigint;
        canceledAt: bigint;
        completedAt: bigint;
        expiredAt: bigint;
        acceptBid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapOrderITCParams"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, string, bigint, bigint] & {
        side: bigint;
        makerReceiver: string;
        takerReceiver: string;
        srcChainID: bigint;
        dstChainID: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "takeSwap"
  ): TypedContractMethod<
    [takeswap: IAtomicSwapBase.TakeSwapMsgStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBid"
  ): TypedContractMethod<
    [updateBidMsg: IAtomicSwapBase.UpdateBidMsgStruct],
    [void],
    "payable"
  >;

  getEvent(
    key: "AcceptedBid"
  ): TypedContractEvent<
    AcceptedBidEvent.InputTuple,
    AcceptedBidEvent.OutputTuple,
    AcceptedBidEvent.OutputObject
  >;
  getEvent(
    key: "AtomicSwapOrderCanceled"
  ): TypedContractEvent<
    AtomicSwapOrderCanceledEvent.InputTuple,
    AtomicSwapOrderCanceledEvent.OutputTuple,
    AtomicSwapOrderCanceledEvent.OutputObject
  >;
  getEvent(
    key: "AtomicSwapOrderCreated"
  ): TypedContractEvent<
    AtomicSwapOrderCreatedEvent.InputTuple,
    AtomicSwapOrderCreatedEvent.OutputTuple,
    AtomicSwapOrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AtomicSwapOrderTook"
  ): TypedContractEvent<
    AtomicSwapOrderTookEvent.InputTuple,
    AtomicSwapOrderTookEvent.OutputTuple,
    AtomicSwapOrderTookEvent.OutputObject
  >;
  getEvent(
    key: "CanceledBid"
  ): TypedContractEvent<
    CanceledBidEvent.InputTuple,
    CanceledBidEvent.OutputTuple,
    CanceledBidEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedNewBid"
  ): TypedContractEvent<
    ReceivedNewBidEvent.InputTuple,
    ReceivedNewBidEvent.OutputTuple,
    ReceivedNewBidEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedBid"
  ): TypedContractEvent<
    UpdatedBidEvent.InputTuple,
    UpdatedBidEvent.OutputTuple,
    UpdatedBidEvent.OutputObject
  >;

  filters: {
    "AcceptedBid(bytes32,address,uint256)": TypedContractEvent<
      AcceptedBidEvent.InputTuple,
      AcceptedBidEvent.OutputTuple,
      AcceptedBidEvent.OutputObject
    >;
    AcceptedBid: TypedContractEvent<
      AcceptedBidEvent.InputTuple,
      AcceptedBidEvent.OutputTuple,
      AcceptedBidEvent.OutputObject
    >;

    "AtomicSwapOrderCanceled(bytes32)": TypedContractEvent<
      AtomicSwapOrderCanceledEvent.InputTuple,
      AtomicSwapOrderCanceledEvent.OutputTuple,
      AtomicSwapOrderCanceledEvent.OutputObject
    >;
    AtomicSwapOrderCanceled: TypedContractEvent<
      AtomicSwapOrderCanceledEvent.InputTuple,
      AtomicSwapOrderCanceledEvent.OutputTuple,
      AtomicSwapOrderCanceledEvent.OutputObject
    >;

    "AtomicSwapOrderCreated(bytes32)": TypedContractEvent<
      AtomicSwapOrderCreatedEvent.InputTuple,
      AtomicSwapOrderCreatedEvent.OutputTuple,
      AtomicSwapOrderCreatedEvent.OutputObject
    >;
    AtomicSwapOrderCreated: TypedContractEvent<
      AtomicSwapOrderCreatedEvent.InputTuple,
      AtomicSwapOrderCreatedEvent.OutputTuple,
      AtomicSwapOrderCreatedEvent.OutputObject
    >;

    "AtomicSwapOrderTook(address,address,bytes32)": TypedContractEvent<
      AtomicSwapOrderTookEvent.InputTuple,
      AtomicSwapOrderTookEvent.OutputTuple,
      AtomicSwapOrderTookEvent.OutputObject
    >;
    AtomicSwapOrderTook: TypedContractEvent<
      AtomicSwapOrderTookEvent.InputTuple,
      AtomicSwapOrderTookEvent.OutputTuple,
      AtomicSwapOrderTookEvent.OutputObject
    >;

    "CanceledBid(bytes32,address)": TypedContractEvent<
      CanceledBidEvent.InputTuple,
      CanceledBidEvent.OutputTuple,
      CanceledBidEvent.OutputObject
    >;
    CanceledBid: TypedContractEvent<
      CanceledBidEvent.InputTuple,
      CanceledBidEvent.OutputTuple,
      CanceledBidEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReceivedNewBid(bytes32,address,uint256)": TypedContractEvent<
      ReceivedNewBidEvent.InputTuple,
      ReceivedNewBidEvent.OutputTuple,
      ReceivedNewBidEvent.OutputObject
    >;
    ReceivedNewBid: TypedContractEvent<
      ReceivedNewBidEvent.InputTuple,
      ReceivedNewBidEvent.OutputTuple,
      ReceivedNewBidEvent.OutputObject
    >;

    "UpdatedBid(bytes32,address,uint256)": TypedContractEvent<
      UpdatedBidEvent.InputTuple,
      UpdatedBidEvent.OutputTuple,
      UpdatedBidEvent.OutputObject
    >;
    UpdatedBid: TypedContractEvent<
      UpdatedBidEvent.InputTuple,
      UpdatedBidEvent.OutputTuple,
      UpdatedBidEvent.OutputObject
    >;
  };
}
