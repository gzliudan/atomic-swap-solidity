/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IInterchainAtomicSwapInterface extends Interface {
  getFunction(nameOrSignature: "onReceivePacket"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AcceptedBid"
      | "AtomicSwapOrderCanceled"
      | "AtomicSwapOrderCreated"
      | "AtomicSwapOrderTook"
      | "CanceledBid"
      | "PlacedBid"
      | "ReceivedNewBid"
      | "UpdatedBid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "onReceivePacket",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "onReceivePacket",
    data: BytesLike
  ): Result;
}

export namespace AcceptedBidEvent {
  export type InputTuple = [
    orderID: BytesLike,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderID: string, bidder: string, amount: bigint];
  export interface OutputObject {
    orderID: string;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AtomicSwapOrderCanceledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AtomicSwapOrderCreatedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AtomicSwapOrderTookEvent {
  export type InputTuple = [
    maker: AddressLike,
    taker: AddressLike,
    id: BytesLike
  ];
  export type OutputTuple = [maker: string, taker: string, id: string];
  export interface OutputObject {
    maker: string;
    taker: string;
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CanceledBidEvent {
  export type InputTuple = [orderID: BytesLike, bidder: AddressLike];
  export type OutputTuple = [orderID: string, bidder: string];
  export interface OutputObject {
    orderID: string;
    bidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlacedBidEvent {
  export type InputTuple = [
    orderID: BytesLike,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderID: string, bidder: string, amount: bigint];
  export interface OutputObject {
    orderID: string;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedNewBidEvent {
  export type InputTuple = [
    orderID: BytesLike,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderID: string, bidder: string, amount: bigint];
  export interface OutputObject {
    orderID: string;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedBidEvent {
  export type InputTuple = [
    orderID: BytesLike,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderID: string, bidder: string, amount: bigint];
  export interface OutputObject {
    orderID: string;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInterchainAtomicSwap extends BaseContract {
  connect(runner?: ContractRunner | null): IInterchainAtomicSwap;
  waitForDeployment(): Promise<this>;

  interface: IInterchainAtomicSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  onReceivePacket: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "onReceivePacket"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "AcceptedBid"
  ): TypedContractEvent<
    AcceptedBidEvent.InputTuple,
    AcceptedBidEvent.OutputTuple,
    AcceptedBidEvent.OutputObject
  >;
  getEvent(
    key: "AtomicSwapOrderCanceled"
  ): TypedContractEvent<
    AtomicSwapOrderCanceledEvent.InputTuple,
    AtomicSwapOrderCanceledEvent.OutputTuple,
    AtomicSwapOrderCanceledEvent.OutputObject
  >;
  getEvent(
    key: "AtomicSwapOrderCreated"
  ): TypedContractEvent<
    AtomicSwapOrderCreatedEvent.InputTuple,
    AtomicSwapOrderCreatedEvent.OutputTuple,
    AtomicSwapOrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AtomicSwapOrderTook"
  ): TypedContractEvent<
    AtomicSwapOrderTookEvent.InputTuple,
    AtomicSwapOrderTookEvent.OutputTuple,
    AtomicSwapOrderTookEvent.OutputObject
  >;
  getEvent(
    key: "CanceledBid"
  ): TypedContractEvent<
    CanceledBidEvent.InputTuple,
    CanceledBidEvent.OutputTuple,
    CanceledBidEvent.OutputObject
  >;
  getEvent(
    key: "PlacedBid"
  ): TypedContractEvent<
    PlacedBidEvent.InputTuple,
    PlacedBidEvent.OutputTuple,
    PlacedBidEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedNewBid"
  ): TypedContractEvent<
    ReceivedNewBidEvent.InputTuple,
    ReceivedNewBidEvent.OutputTuple,
    ReceivedNewBidEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedBid"
  ): TypedContractEvent<
    UpdatedBidEvent.InputTuple,
    UpdatedBidEvent.OutputTuple,
    UpdatedBidEvent.OutputObject
  >;

  filters: {
    "AcceptedBid(bytes32,address,uint256)": TypedContractEvent<
      AcceptedBidEvent.InputTuple,
      AcceptedBidEvent.OutputTuple,
      AcceptedBidEvent.OutputObject
    >;
    AcceptedBid: TypedContractEvent<
      AcceptedBidEvent.InputTuple,
      AcceptedBidEvent.OutputTuple,
      AcceptedBidEvent.OutputObject
    >;

    "AtomicSwapOrderCanceled(bytes32)": TypedContractEvent<
      AtomicSwapOrderCanceledEvent.InputTuple,
      AtomicSwapOrderCanceledEvent.OutputTuple,
      AtomicSwapOrderCanceledEvent.OutputObject
    >;
    AtomicSwapOrderCanceled: TypedContractEvent<
      AtomicSwapOrderCanceledEvent.InputTuple,
      AtomicSwapOrderCanceledEvent.OutputTuple,
      AtomicSwapOrderCanceledEvent.OutputObject
    >;

    "AtomicSwapOrderCreated(bytes32)": TypedContractEvent<
      AtomicSwapOrderCreatedEvent.InputTuple,
      AtomicSwapOrderCreatedEvent.OutputTuple,
      AtomicSwapOrderCreatedEvent.OutputObject
    >;
    AtomicSwapOrderCreated: TypedContractEvent<
      AtomicSwapOrderCreatedEvent.InputTuple,
      AtomicSwapOrderCreatedEvent.OutputTuple,
      AtomicSwapOrderCreatedEvent.OutputObject
    >;

    "AtomicSwapOrderTook(address,address,bytes32)": TypedContractEvent<
      AtomicSwapOrderTookEvent.InputTuple,
      AtomicSwapOrderTookEvent.OutputTuple,
      AtomicSwapOrderTookEvent.OutputObject
    >;
    AtomicSwapOrderTook: TypedContractEvent<
      AtomicSwapOrderTookEvent.InputTuple,
      AtomicSwapOrderTookEvent.OutputTuple,
      AtomicSwapOrderTookEvent.OutputObject
    >;

    "CanceledBid(bytes32,address)": TypedContractEvent<
      CanceledBidEvent.InputTuple,
      CanceledBidEvent.OutputTuple,
      CanceledBidEvent.OutputObject
    >;
    CanceledBid: TypedContractEvent<
      CanceledBidEvent.InputTuple,
      CanceledBidEvent.OutputTuple,
      CanceledBidEvent.OutputObject
    >;

    "PlacedBid(bytes32,address,uint256)": TypedContractEvent<
      PlacedBidEvent.InputTuple,
      PlacedBidEvent.OutputTuple,
      PlacedBidEvent.OutputObject
    >;
    PlacedBid: TypedContractEvent<
      PlacedBidEvent.InputTuple,
      PlacedBidEvent.OutputTuple,
      PlacedBidEvent.OutputObject
    >;

    "ReceivedNewBid(bytes32,address,uint256)": TypedContractEvent<
      ReceivedNewBidEvent.InputTuple,
      ReceivedNewBidEvent.OutputTuple,
      ReceivedNewBidEvent.OutputObject
    >;
    ReceivedNewBid: TypedContractEvent<
      ReceivedNewBidEvent.InputTuple,
      ReceivedNewBidEvent.OutputTuple,
      ReceivedNewBidEvent.OutputObject
    >;

    "UpdatedBid(bytes32,address,uint256)": TypedContractEvent<
      UpdatedBidEvent.InputTuple,
      UpdatedBidEvent.OutputTuple,
      UpdatedBidEvent.OutputObject
    >;
    UpdatedBid: TypedContractEvent<
      UpdatedBidEvent.InputTuple,
      UpdatedBidEvent.OutputTuple,
      UpdatedBidEvent.OutputObject
    >;
  };
}
