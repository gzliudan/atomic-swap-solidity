/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IInterchainAtomicSwap {
  export type InitialParamsStruct = {
    admin: AddressLike;
    vestingManager: AddressLike;
    chainID: BigNumberish;
    bridge: AddressLike;
    treasury: AddressLike;
    sellerFee: BigNumberish;
    buyerFee: BigNumberish;
  };

  export type InitialParamsStructOutput = [
    admin: string,
    vestingManager: string,
    chainID: bigint,
    bridge: string,
    treasury: string,
    sellerFee: bigint,
    buyerFee: bigint
  ] & {
    admin: string;
    vestingManager: string;
    chainID: bigint;
    bridge: string;
    treasury: string;
    sellerFee: bigint;
    buyerFee: bigint;
  };
}

export interface InterchainAtomicSwapLogicInterface extends Interface {
  getFunction(nameOrSignature: "_validateInitializeParams"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_validateInitializeParams",
    values: [IInterchainAtomicSwap.InitialParamsStruct, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_validateInitializeParams",
    data: BytesLike
  ): Result;
}

export interface InterchainAtomicSwapLogic extends BaseContract {
  connect(runner?: ContractRunner | null): InterchainAtomicSwapLogic;
  waitForDeployment(): Promise<this>;

  interface: InterchainAtomicSwapLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _validateInitializeParams: TypedContractMethod<
    [
      _params: IInterchainAtomicSwap.InitialParamsStruct,
      maxFeeRateScale: BigNumberish
    ],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_validateInitializeParams"
  ): TypedContractMethod<
    [
      _params: IInterchainAtomicSwap.InitialParamsStruct,
      maxFeeRateScale: BigNumberish
    ],
    [void],
    "view"
  >;

  filters: {};
}
